// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// BucketAPI is an autogenerated mock type for the BucketAPI type
type BucketAPI struct {
	mock.Mock
}

// CopyObjectsWithContext provides a mock function with given fields: ctx, srcBucket, srcKey, destBucket, destKeyPrefix
func (_m *BucketAPI) CopyObjectsWithContext(ctx context.Context, srcBucket string, srcKey string, destBucket string, destKeyPrefix string) error {
	ret := _m.Called(ctx, srcBucket, srcKey, destBucket, destKeyPrefix)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, srcBucket, srcKey, destBucket, destKeyPrefix)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteObjectsWithContext provides a mock function with given fields: ctx, bucket, keyPrefix
func (_m *BucketAPI) DeleteObjectsWithContext(ctx context.Context, bucket string, keyPrefix string) error {
	ret := _m.Called(ctx, bucket, keyPrefix)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, bucket, keyPrefix)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KeySizeWithContext provides a mock function with given fields: ctx, bucket, key
func (_m *BucketAPI) KeySizeWithContext(ctx context.Context, bucket string, key string) (int, error) {
	ret := _m.Called(ctx, bucket, key)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int); ok {
		r0 = rf(ctx, bucket, key)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucket, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncObjectsWithContext provides a mock function with given fields: ctx, srcBucket, srcKey, destBucket, destKeyPrefix
func (_m *BucketAPI) SyncObjectsWithContext(ctx context.Context, srcBucket string, srcKey string, destBucket string, destKeyPrefix string) error {
	ret := _m.Called(ctx, srcBucket, srcKey, destBucket, destKeyPrefix)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, srcBucket, srcKey, destBucket, destKeyPrefix)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
